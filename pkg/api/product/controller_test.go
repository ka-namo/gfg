package product

import (
	"bytes"
	"errors"
	"net/http"
	"net/http/httptest"
	"testing"

	"coding-challenge-go/pkg/api/middleware"
	sellerAPI "coding-challenge-go/pkg/api/seller"

	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
)

// DeleterMock is an autogenerated mock type for the Deleter type
type DeleterMock struct {
	mock.Mock
}

// delete provides a mock function with given fields: _a0
func (_m *DeleterMock) delete(_a0 *product) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*product) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FinderByUUIDMock is an autogenerated mock type for the FinderByUUID type
type FinderByUUIDMock struct {
	mock.Mock
}

// findByUUID provides a mock function with given fields: uuid
func (_m *FinderByUUIDMock) findByUUID(uuid string) (*product, error) {
	ret := _m.Called(uuid)

	var r0 *product
	if rf, ok := ret.Get(0).(func(string) *product); ok {
		r0 = rf(uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InserterMock is an autogenerated mock type for the Inserter type
type InserterMock struct {
	mock.Mock
}

// insert provides a mock function with given fields: _a0
func (_m *InserterMock) insert(_a0 *product) (*product, error) {
	ret := _m.Called(_a0)

	var r0 *product
	if rf, ok := ret.Get(0).(func(*product) *product); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*product) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ManyFinderMock is an autogenerated mock type for the ManyFinder type
type ManyFinderMock struct {
	mock.Mock
}

// list provides a mock function with given fields: offset, limit
func (_m *ManyFinderMock) list(offset int, limit int) ([]*product, error) {
	ret := _m.Called(offset, limit)

	var r0 []*product
	if rf, ok := ret.Get(0).(func(int, int) []*product); ok {
		r0 = rf(offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*product)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SellerFinderMock is an autogenerated mock type for the SellerFinder type
type SellerFinderMock struct {
	mock.Mock
}

// FindByUUID provides a mock function with given fields: uuid
func (_m *SellerFinderMock) FindByUUID(uuid string) (*sellerAPI.Seller, error) {
	ret := _m.Called(uuid)

	var r0 *sellerAPI.Seller
	if rf, ok := ret.Get(0).(func(string) *sellerAPI.Seller); ok {
		r0 = rf(uuid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sellerAPI.Seller)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StockChangedNotifierMock is an autogenerated mock type for the StockChangedNotifier type
type StockChangedNotifierMock struct {
	mock.Mock
}

// StockChanged provides a mock function with given fields: sellerUUID, sellerReceiverID, oldStock, newStock, _a4
func (_m *StockChangedNotifierMock) StockChanged(sellerUUID string, sellerReceiverID string, oldStock int, newStock int, _a4 string) {
	_m.Called(sellerUUID, sellerReceiverID, oldStock, newStock, _a4)
}

// UpdaterMock is an autogenerated mock type for the Updater type
type UpdaterMock struct {
	mock.Mock
}

// update provides a mock function with given fields: _a0
func (_m *UpdaterMock) update(_a0 *product) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*product) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

func Test_controller_List(t *testing.T) {
	type fields struct {
		deleter          Deleter
		updater          Updater
		inserter         Inserter
		finderByUUID     FinderByUUID
		finder           ManyFinder
		sellerRepository SellerFinder
		emailProvider    StockChangedNotifier
		smsProvider      StockChangedNotifier
	}
	tests := []struct {
		name      string
		fields    fields
		expStatus int
		path      string
		expBody   string
	}{
		{
			name: "v2: Returns 200OK",
			fields: fields{
				finder: func() ManyFinder {
					m := new(ManyFinderMock)
					p := []*product{
						{
							ProductID:  1,
							Name:       "shoes",
							UUID:       "61981e52-e1ca-449e-b79f-01d5906b3435",
							Brand:      "nike",
							Stock:      10,
							SellerUUID: "a223850e-d8ab-430a-9a1a-28628cfd52b0",
						},
						{
							ProductID:  2,
							Name:       "socks",
							UUID:       "36345687-e998-4359-a2ed-a9703fe39b5f",
							Brand:      "adidas",
							Stock:      15,
							SellerUUID: "a223850e-d8ab-430a-9a1a-28628cfd52b0",
						},
					}
					m.On("list", 0, 10).Return(p, nil)
					return m
				}(),
			},
			expStatus: http.StatusOK,
			path:      "/api/v2/products",
			expBody:   `[{"uuid":"61981e52-e1ca-449e-b79f-01d5906b3435","name":"shoes","brand":"nike","stock":10,"seller":{"uuid":"a223850e-d8ab-430a-9a1a-28628cfd52b0","_links":{"self":{"href":"/sellers/a223850e-d8ab-430a-9a1a-28628cfd52b0"}}}},{"uuid":"36345687-e998-4359-a2ed-a9703fe39b5f","name":"socks","brand":"adidas","stock":15,"seller":{"uuid":"a223850e-d8ab-430a-9a1a-28628cfd52b0","_links":{"self":{"href":"/sellers/a223850e-d8ab-430a-9a1a-28628cfd52b0"}}}}]`,
		},
		{
			name: "v1: Returns 200OK",
			fields: fields{
				finder: func() ManyFinder {
					m := new(ManyFinderMock)
					p := []*product{
						{
							ProductID:  1,
							Name:       "shoes",
							UUID:       "61981e52-e1ca-449e-b79f-01d5906b3435",
							Brand:      "nike",
							Stock:      10,
							SellerUUID: "a223850e-d8ab-430a-9a1a-28628cfd52b0",
						},
						{
							ProductID:  2,
							Name:       "socks",
							UUID:       "36345687-e998-4359-a2ed-a9703fe39b5f",
							Brand:      "adidas",
							Stock:      15,
							SellerUUID: "a223850e-d8ab-430a-9a1a-28628cfd52b0",
						},
					}
					m.On("list", 0, 10).Return(p, nil)
					return m
				}(),
			},
			expStatus: http.StatusOK,
			path:      "/api/v1/products",
			expBody:   `[{"uuid":"61981e52-e1ca-449e-b79f-01d5906b3435","name":"shoes","brand":"nike","stock":10,"seller_uuid":"a223850e-d8ab-430a-9a1a-28628cfd52b0"},{"uuid":"36345687-e998-4359-a2ed-a9703fe39b5f","name":"socks","brand":"adidas","stock":15,"seller_uuid":"a223850e-d8ab-430a-9a1a-28628cfd52b0"}]`,
		},
		{
			name: "v1: Returns 500",
			fields: fields{
				finder: func() ManyFinder {
					m := new(ManyFinderMock)
					m.On("list", 0, 10).Return(nil, errors.New("any error"))
					return m
				}(),
			},
			expStatus: http.StatusInternalServerError,
			path:      "/api/v1/products",
			expBody:   `{"error":"Fail to query product list"}`,
		},
		{
			name: "v2: Returns 500",
			fields: fields{
				finder: func() ManyFinder {
					m := new(ManyFinderMock)
					m.On("list", 0, 10).Return(nil, errors.New("any error"))
					return m
				}(),
			},
			expStatus: http.StatusInternalServerError,
			path:      "/api/v2/products",
			expBody:   `{"error":"Fail to query product list"}`,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			pc := NewController(
				tt.fields.deleter,
				tt.fields.updater,
				tt.fields.inserter,
				tt.fields.finderByUUID,
				tt.fields.finder,
				tt.fields.sellerRepository,
				tt.fields.emailProvider,
				tt.fields.smsProvider,
			)
			r := gin.Default()
			r.Use(middleware.APIVersionResolver)
			r.GET("/api/v2/products", pc.List)
			r.GET("/api/v1/products", pc.List)

			t.Run(tt.name, func(t *testing.T) {
				w := httptest.NewRecorder()

				req, err := http.NewRequest(http.MethodGet, tt.path, nil)
				assert.NoError(t, err)

				r.ServeHTTP(w, req)

				assert.Equal(t, tt.expStatus, w.Code)
				assert.Equal(t, tt.expBody, w.Body.String())
			})

		})
	}
}

func Test_controller_Get(t *testing.T) {
	type fields struct {
		deleter          Deleter
		updater          Updater
		inserter         Inserter
		finderByUUID     FinderByUUID
		finder           ManyFinder
		sellerRepository SellerFinder
		emailProvider    StockChangedNotifier
		smsProvider      StockChangedNotifier
	}
	tests := []struct {
		name      string
		fields    fields
		expStatus int
		path      string
		expBody   string
	}{
		{
			name: "v2: Returns 200OK",
			fields: fields{
				finderByUUID: func() FinderByUUID {
					m := new(FinderByUUIDMock)
					p := &product{
						ProductID:  1,
						Name:       "shoes",
						UUID:       "61981e52-e1ca-449e-b79f-01d5906b3435",
						Brand:      "nike",
						Stock:      10,
						SellerUUID: "a223850e-d8ab-430a-9a1a-28628cfd52b0",
					}
					m.On("findByUUID", "61981e52-e1ca-449e-b79f-01d5906b3435").Return(p, nil)
					return m
				}(),
			},
			expStatus: http.StatusOK,
			path:      "/api/v2/product?id=61981e52-e1ca-449e-b79f-01d5906b3435",
			expBody:   `{"uuid":"61981e52-e1ca-449e-b79f-01d5906b3435","name":"shoes","brand":"nike","stock":10,"seller":{"uuid":"a223850e-d8ab-430a-9a1a-28628cfd52b0","_links":{"self":{"href":"/sellers/a223850e-d8ab-430a-9a1a-28628cfd52b0"}}}}`,
		},
		{
			name: "v1: Returns 200OK",
			fields: fields{
				finderByUUID: func() FinderByUUID {
					m := new(FinderByUUIDMock)
					p := &product{
						ProductID:  1,
						Name:       "shoes",
						UUID:       "61981e52-e1ca-449e-b79f-01d5906b3435",
						Brand:      "nike",
						Stock:      10,
						SellerUUID: "a223850e-d8ab-430a-9a1a-28628cfd52b0",
					}
					m.On("findByUUID", "61981e52-e1ca-449e-b79f-01d5906b3435").Return(p, nil)
					return m
				}(),
			},
			expStatus: http.StatusOK,
			path:      "/api/v1/product?id=61981e52-e1ca-449e-b79f-01d5906b3435",
			expBody:   `{"uuid":"61981e52-e1ca-449e-b79f-01d5906b3435","name":"shoes","brand":"nike","stock":10,"seller_uuid":"a223850e-d8ab-430a-9a1a-28628cfd52b0"}`,
		},
		{
			name:      "v2: Returns 400",
			expStatus: http.StatusBadRequest,
			path:      "/api/v2/product",
			expBody:   `{"error":"Key: 'UUID' Error:Field validation for 'UUID' failed on the 'required' tag"}`,
		},
		{
			name:      "v1: Returns 400",
			expStatus: http.StatusBadRequest,
			path:      "/api/v1/product",
			expBody:   `{"error":"Key: 'UUID' Error:Field validation for 'UUID' failed on the 'required' tag"}`,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			pc := NewController(
				tt.fields.deleter,
				tt.fields.updater,
				tt.fields.inserter,
				tt.fields.finderByUUID,
				tt.fields.finder,
				tt.fields.sellerRepository,
				tt.fields.emailProvider,
				tt.fields.smsProvider,
			)
			r := gin.Default()
			r.Use(middleware.APIVersionResolver)
			r.GET("/api/v1/product", pc.Get)
			r.GET("/api/v2/product", pc.Get)

			t.Run(tt.name, func(t *testing.T) {
				w := httptest.NewRecorder()

				req, err := http.NewRequest(http.MethodGet, tt.path, nil)
				assert.NoError(t, err)

				r.ServeHTTP(w, req)

				assert.Equal(t, tt.expStatus, w.Code)
				assert.Equal(t, tt.expBody, w.Body.String())
			})

		})
	}
}

func Test_controller_Insert(t *testing.T) {
	type fields struct {
		deleter          Deleter
		updater          Updater
		inserter         Inserter
		finderByUUID     FinderByUUID
		finder           ManyFinder
		sellerRepository SellerFinder
		emailProvider    StockChangedNotifier
		smsProvider      StockChangedNotifier
	}
	tests := []struct {
		name      string
		fields    fields
		expStatus int
		path      string
		body      string
		expBody   string
	}{
		{
			name: "v1: inserts Product, returns 200",
			fields: fields{
				sellerRepository: func() SellerFinder {
					m := new(SellerFinderMock)
					s := &sellerAPI.Seller{
						UUID:  "a223850e-d8ab-430a-9a1a-28628cfd52b0",
						Name:  "david",
						Email: "d@example.com",
						Phone: "324-3243-32",
					}
					m.On("FindByUUID", "a223850e-d8ab-430a-9a1a-28628cfd52b0").
						Return(s, nil)
					return m
				}(),
				inserter: func() Inserter {
					m := new(InserterMock)
					p := &product{
						Name:       "shoes",
						Brand:      "nike",
						Stock:      10,
						SellerUUID: "a223850e-d8ab-430a-9a1a-28628cfd52b0",
					}
					pWithUUID := &product{
						Name:       "shoes",
						UUID:       "61981e52-e1ca-449e-b79f-01d5906b3435",
						Brand:      "nike",
						Stock:      10,
						SellerUUID: "a223850e-d8ab-430a-9a1a-28628cfd52b0",
					}
					m.On("insert", p).Return(pWithUUID, nil)
					return m
				}(),
			},
			body:      `{"name":"shoes","brand":"nike","stock":10,"seller":"a223850e-d8ab-430a-9a1a-28628cfd52b0"}`,
			expStatus: http.StatusOK,
			path:      "/api/v1/product",
			expBody:   `{"uuid":"61981e52-e1ca-449e-b79f-01d5906b3435","name":"shoes","brand":"nike","stock":10,"seller_uuid":"a223850e-d8ab-430a-9a1a-28628cfd52b0"}`,
		},
		{
			name: "v2: inserts Product, returns 200",
			fields: fields{
				sellerRepository: func() SellerFinder {
					m := new(SellerFinderMock)
					s := &sellerAPI.Seller{
						UUID:  "a223850e-d8ab-430a-9a1a-28628cfd52b0",
						Name:  "david",
						Email: "d@example.com",
						Phone: "324-3243-32",
					}
					m.On("FindByUUID", "a223850e-d8ab-430a-9a1a-28628cfd52b0").
						Return(s, nil)
					return m
				}(),
				inserter: func() Inserter {
					m := new(InserterMock)
					p := &product{
						Name:       "shoes",
						Brand:      "nike",
						Stock:      10,
						SellerUUID: "a223850e-d8ab-430a-9a1a-28628cfd52b0",
					}
					pWithUUID := &product{
						Name:       "shoes",
						UUID:       "61981e52-e1ca-449e-b79f-01d5906b3435",
						Brand:      "nike",
						Stock:      10,
						SellerUUID: "a223850e-d8ab-430a-9a1a-28628cfd52b0",
					}
					m.On("insert", p).Return(pWithUUID, nil)
					return m
				}(),
			},
			body:      `{"name":"shoes","brand":"nike","stock":10,"seller":"a223850e-d8ab-430a-9a1a-28628cfd52b0"}`,
			expStatus: http.StatusOK,
			path:      "/api/v2/product",
			expBody:   `{"uuid":"61981e52-e1ca-449e-b79f-01d5906b3435","name":"shoes","brand":"nike","stock":10,"seller":{"uuid":"a223850e-d8ab-430a-9a1a-28628cfd52b0","_links":{"self":{"href":"/sellers/a223850e-d8ab-430a-9a1a-28628cfd52b0"}}}}`,
		},
		{
			name:      "v1: Product, returns 400",
			body:      "",
			expStatus: http.StatusBadRequest,
			path:      "/api/v1/product",
			expBody:   `{"error":"EOF"}`,
		},
		{
			name:      "v2: Product, returns 400",
			body:      "",
			expStatus: http.StatusBadRequest,
			path:      "/api/v2/product",
			expBody:   `{"error":"EOF"}`,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			pc := NewController(
				tt.fields.deleter,
				tt.fields.updater,
				tt.fields.inserter,
				tt.fields.finderByUUID,
				tt.fields.finder,
				tt.fields.sellerRepository,
				tt.fields.emailProvider,
				tt.fields.smsProvider,
			)
			r := gin.Default()
			r.Use(middleware.APIVersionResolver)
			r.POST("/api/v2/product", pc.Post)
			r.POST("/api/v1/product", pc.Post)

			t.Run(tt.name, func(t *testing.T) {
				w := httptest.NewRecorder()

				req, err := http.NewRequest(http.MethodPost, tt.path, bytes.NewBufferString(tt.body))
				assert.NoError(t, err)

				r.ServeHTTP(w, req)

				assert.Equal(t, tt.expStatus, w.Code)
				assert.Equal(t, tt.expBody, w.Body.String())
			})

		})
	}
}

func Test_controller_Update(t *testing.T) {
	type fields struct {
		deleter          Deleter
		updater          Updater
		inserter         Inserter
		finderByUUID     FinderByUUID
		finder           ManyFinder
		sellerRepository SellerFinder
		emailProvider    StockChangedNotifier
		smsProvider      StockChangedNotifier
	}
	tests := []struct {
		name      string
		fields    fields
		body      string
		expStatus int
		path      string
		expBody   string
	}{
		{
			name: "v2: Updates Product: stocks changed, triggers sms and email and returns 200OK",
			fields: fields{
				finderByUUID: func() FinderByUUID {
					m := new(FinderByUUIDMock)
					p := &product{
						ProductID:  1,
						Name:       "shoes",
						UUID:       "61981e52-e1ca-449e-b79f-01d5906b3435",
						Brand:      "nike",
						Stock:      10,
						SellerUUID: "a223850e-d8ab-430a-9a1a-28628cfd52b0",
					}
					m.On("findByUUID", "61981e52-e1ca-449e-b79f-01d5906b3435").Return(p, nil)
					return m
				}(),
				sellerRepository: func() SellerFinder {
					m := new(SellerFinderMock)
					s := &sellerAPI.Seller{
						UUID:  "a223850e-d8ab-430a-9a1a-28628cfd52b0",
						Name:  "david",
						Email: "d@example.com",
						Phone: "324-3243-32",
					}
					m.On("FindByUUID", "a223850e-d8ab-430a-9a1a-28628cfd52b0").
						Return(s, nil)
					return m
				}(),
				updater: func() Updater {
					m := new(UpdaterMock)
					p := &product{
						ProductID:  1,
						Name:       "shoes",
						UUID:       "61981e52-e1ca-449e-b79f-01d5906b3435",
						Brand:      "nike",
						Stock:      20,
						SellerUUID: "a223850e-d8ab-430a-9a1a-28628cfd52b0",
					}
					m.On("update", p).Return(nil)
					return m
				}(),
				emailProvider: func() StockChangedNotifier {
					m := new(StockChangedNotifierMock)
					m.On("StockChanged", "a223850e-d8ab-430a-9a1a-28628cfd52b0", "d@example.com", 10, 20, "shoes")
					return m
				}(),
				smsProvider: func() StockChangedNotifier {
					m := new(StockChangedNotifierMock)
					m.On("StockChanged", "a223850e-d8ab-430a-9a1a-28628cfd52b0", "324-3243-32", 10, 20, "shoes")
					return m
				}(),
			},
			body:      `{"name":"shoes","brand":"nike","stock":20,"seller":"a223850e-d8ab-430a-9a1a-28628cfd52b0"}`,
			expStatus: http.StatusOK,
			path:      "/api/v2/product?id=61981e52-e1ca-449e-b79f-01d5906b3435",
			expBody:   `{"uuid":"61981e52-e1ca-449e-b79f-01d5906b3435","name":"shoes","brand":"nike","stock":20,"seller":{"uuid":"a223850e-d8ab-430a-9a1a-28628cfd52b0","_links":{"self":{"href":"/sellers/a223850e-d8ab-430a-9a1a-28628cfd52b0"}}}}`,
		},
		{
			name:      "v1: Returns 400, no id passed",
			expStatus: http.StatusBadRequest,
			path:      "/api/v1/product",
			expBody:   `{"error":"Key: 'UUID' Error:Field validation for 'UUID' failed on the 'required' tag"}`,
		},
		{
			name:      "v2: Returns 400, no id passed",
			expStatus: http.StatusBadRequest,
			path:      "/api/v2/product",
			expBody:   `{"error":"Key: 'UUID' Error:Field validation for 'UUID' failed on the 'required' tag"}`,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			pc := NewController(
				tt.fields.deleter,
				tt.fields.updater,
				tt.fields.inserter,
				tt.fields.finderByUUID,
				tt.fields.finder,
				tt.fields.sellerRepository,
				tt.fields.emailProvider,
				tt.fields.smsProvider,
			)
			r := gin.Default()
			r.Use(middleware.APIVersionResolver)
			r.PUT("/api/v1/product", pc.Put)
			r.PUT("/api/v2/product", pc.Put)

			t.Run(tt.name, func(t *testing.T) {
				w := httptest.NewRecorder()

				req, err := http.NewRequest(http.MethodPut, tt.path, bytes.NewBufferString(tt.body))
				assert.NoError(t, err)

				r.ServeHTTP(w, req)

				assert.Equal(t, tt.expStatus, w.Code)
				assert.Equal(t, tt.expBody, w.Body.String())
			})

		})
	}
}

func Test_controller_Delete(t *testing.T) {
	type fields struct {
		deleter          Deleter
		updater          Updater
		inserter         Inserter
		finderByUUID     FinderByUUID
		finder           ManyFinder
		sellerRepository SellerFinder
		emailProvider    StockChangedNotifier
		smsProvider      StockChangedNotifier
	}
	tests := []struct {
		name      string
		fields    fields
		body      string
		expStatus int
		path      string
		expBody   string
	}{
		{
			name: "v2: Delete Product returns 200OK",
			fields: fields{
				finderByUUID: func() FinderByUUID {
					m := new(FinderByUUIDMock)
					p := &product{
						ProductID:  1,
						Name:       "shoes",
						UUID:       "61981e52-e1ca-449e-b79f-01d5906b3435",
						Brand:      "nike",
						Stock:      10,
						SellerUUID: "a223850e-d8ab-430a-9a1a-28628cfd52b0",
					}
					m.On("findByUUID", "61981e52-e1ca-449e-b79f-01d5906b3435").Return(p, nil)
					return m
				}(),
				deleter: func() Deleter {
					m := new(DeleterMock)
					p := &product{
						ProductID:  1,
						Name:       "shoes",
						UUID:       "61981e52-e1ca-449e-b79f-01d5906b3435",
						Brand:      "nike",
						Stock:      10,
						SellerUUID: "a223850e-d8ab-430a-9a1a-28628cfd52b0",
					}
					m.On("delete", p).Return(nil)
					return m
				}(),
			},
			expStatus: http.StatusOK,
			path:      "/api/v2/product?id=61981e52-e1ca-449e-b79f-01d5906b3435",
			expBody:   `{}`,
		},
		{
			name: "v2: fail to delete, returns 500",
			fields: fields{
				finderByUUID: func() FinderByUUID {
					m := new(FinderByUUIDMock)
					p := &product{
						ProductID:  1,
						Name:       "shoes",
						UUID:       "61981e52-e1ca-449e-b79f-01d5906b3435",
						Brand:      "nike",
						Stock:      10,
						SellerUUID: "a223850e-d8ab-430a-9a1a-28628cfd52b0",
					}
					m.On("findByUUID", "61981e52-e1ca-449e-b79f-01d5906b3435").Return(p, nil)
					return m
				}(),
				deleter: func() Deleter {
					m := new(DeleterMock)
					p := &product{
						ProductID:  1,
						Name:       "shoes",
						UUID:       "61981e52-e1ca-449e-b79f-01d5906b3435",
						Brand:      "nike",
						Stock:      10,
						SellerUUID: "a223850e-d8ab-430a-9a1a-28628cfd52b0",
					}
					m.On("delete", p).Return(errors.New("any error"))
					return m
				}(),
			},
			expStatus: http.StatusInternalServerError,
			path:      "/api/v2/product?id=61981e52-e1ca-449e-b79f-01d5906b3435",
			expBody:   `{"error":"Fail to delete product"}`,
		},

		{
			name: "v2: Product not found returns 400",
			fields: fields{
				finderByUUID: func() FinderByUUID {
					m := new(FinderByUUIDMock)
					m.On("findByUUID", "61981e52-e1ca-449e-b79f-01d5906b3435").Return(nil, nil)
					return m
				}(),
			},
			expStatus: http.StatusBadRequest,
			path:      "/api/v2/product?id=61981e52-e1ca-449e-b79f-01d5906b3435",
			expBody:   `{"error":"Product is not found"}`,
		},
		{
			name: "v2: Repository returns error, returns 500",
			fields: fields{
				finderByUUID: func() FinderByUUID {
					m := new(FinderByUUIDMock)
					m.On("findByUUID", "61981e52-e1ca-449e-b79f-01d5906b3435").Return(nil, errors.New("any error"))
					return m
				}(),
			},
			expStatus: http.StatusInternalServerError,
			path:      "/api/v2/product?id=61981e52-e1ca-449e-b79f-01d5906b3435",
			expBody:   `{"error":"Fail to query product by uuid"}`,
		},

		{
			name:      "v1: Returns 400, no id passed",
			expStatus: http.StatusBadRequest,
			path:      "/api/v1/product",
			expBody:   `{"error":"Key: 'UUID' Error:Field validation for 'UUID' failed on the 'required' tag"}`,
		},
		{
			name:      "v2: Returns 400, no id passed",
			expStatus: http.StatusBadRequest,
			path:      "/api/v2/product",
			expBody:   `{"error":"Key: 'UUID' Error:Field validation for 'UUID' failed on the 'required' tag"}`,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			pc := NewController(
				tt.fields.deleter,
				tt.fields.updater,
				tt.fields.inserter,
				tt.fields.finderByUUID,
				tt.fields.finder,
				tt.fields.sellerRepository,
				tt.fields.emailProvider,
				tt.fields.smsProvider,
			)
			r := gin.Default()
			r.Use(middleware.APIVersionResolver)
			r.DELETE("/api/v1/product", pc.Delete)
			r.DELETE("/api/v2/product", pc.Delete)

			t.Run(tt.name, func(t *testing.T) {
				w := httptest.NewRecorder()

				req, err := http.NewRequest(http.MethodDelete, tt.path, nil)
				assert.NoError(t, err)

				r.ServeHTTP(w, req)

				assert.Equal(t, tt.expStatus, w.Code)
				assert.Equal(t, tt.expBody, w.Body.String())
			})

		})
	}
}
